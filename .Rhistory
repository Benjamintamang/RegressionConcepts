apple <- c('red', 'Green', 'yellow')
print(apple)
print(class(apple))
list1 <- list(c(2,5,3), 21.3, sin)
print(list1)
print(class(list1))
M = matrix(c('a', 'a', 'b','c','b','a'), nrow = 23, ncol = 3, brow = TRUE)
print(M)
class(M)
M = matrix(c('a', 'a', 'b','c','b','a'), nrow = 2, ncol = 3, brow = TRUE)
print(M)
class(M)
M = matrix(c('a', 'a', 'b','c','b','a'), nrow = 2, ncol = 3, brow = TRUE))
print(M)
class(M)
M = matrix(c('a', 'a', 'b','c','b','a'), nrow = 2, ncol = 3, byrow = TRUE)
print(M)
class(M)
a <- array(c('green', 'yellow'), dim = c(3, 3, 2))
print(a)
class(a)
apple_colors <- c('green', 'green', 'yellow', 'red', 'red', 'red', 'green')
factor_apple <- factor(apple_colors)
print(factor_apple)
print(nlevels(factor_apple))
BMI <- data.frame(
gender  = c('Male', 'Female', 'Female'),
height = c(152, 171.5, 165),
weight = c(81,93,78),
Age = c(42,38,26)
)
print(BMI)
var.1 = c(0, 1, 2, 3, 4)
#Assignment using leftware operator
var.2 <- c('learn', 'R')
#Assignment using rightward operator
c(TRUE, 1) -> var.3
print(var.1)
cat("var.1 is ", var.1, "\n")
cat("var.2 is ", var.2, "\n")
cat("var.3 is ", var.3, "\n")
vec1 <- c(2, 8, 2, 4)
vec2 <- c(10, 5, 4)
print(vec1+vec2)
vec1 <- c(2, 8.5, 2, 4)
vec2 <- c(10, 5, 4)
print(vec1+vec2)
vec1 <- c(10, 5.5, 6.3)
vec2 <- c(11, 2, 3)
print(vec1 - vec2)
#Multiplication of vectors
print(vec1 * vec2)
print(vec1/vec2)
x <- seq(-10, 10, by = 0.1)
#Choose the mean as 2.5(hypothesis) and standard deviation 0.5
y <- dnorm(x, mean = 2.5, sd = 0.5)
#Giving the chart a name
png(file = "dnorm.png")
plot(x, y)
#saving the file
dev.off()
print(plot(x, y))
x <- seq(-10, 10, by = .2)
#Choose the mean as 2.5 and sd as 2
y <- pnorm(x, mean = 2.5, sd = 2)
#Give the chart file name
png(file = "pnrom.png")
#
print(plot(x, y))
#save the file
dev.off()
print(plot(x, y))
x <- seq(-10, 10, by = .2)
y <- pnorm(x, mean = 2.5, sd = 2)
png(file = "pnrom.png")
print(plot(x, y))
dev.off()
x <- seq(0, 1, by = 0.02)
y <- qnorm(x, mean = 2 , sd = 3)
png(file = "qnorm.png")
plot(x, y)
print(plot(x, y))
dev.off()
print(plot(x, y))
y <- rnorm(50)
#Gibe the chart file a name
png(file = "rnorm.png")
#Plot the histogram for this sample.
hist(y, main = "Normal Distribution")
#save the file
dev.off()
hist(y, main = "Normal Distribution")
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
relation <- lm(y~x)
print(relation)
print(summary(relation))
a <- data.frame(x = 70)
result <- predict(relation, a)
print(result)
a <- data.frame(x = 170)
result <- predict(relation, a)
print(result)
png(file = "linearregression.png")
plot(y, x, col = "blue", main = "Height and Weight Regression",
abline(relation), cex = 1.3, pch = 16, xlab = "Weight in Kg", ylab = "Height in cm")
#save the file
dev.off()
plot(y, x, col = "blue", main = "Height and Weight Regression",
abline(relation), cex = 1.3, pch = 16, xlab = "Weight in Kg", ylab = "Height in cm")
png(file = "linearregression.png")
plot(y, x, col = "blue", main = "Height and Weight Regression",
abline(lm(x~y)), cex = 1.3, pch = 16, xlab = "Weight in Kg", ylab = "Height in cm")
#save the file
dev.off()
png(file = "linearregression.png")
plot(y, x, col = "blue", main = "Height and Weight Regression",
abline(lm(x~y)), cex = 1.3, pch = 16, xlab = "Weight in Kg", ylab = "Height in cm")
#save the file
dev.off()
png(file = "linearregression.png")
plot(y, x, col = "blue", main = "Height and Weight Regression",
abline(lm(x~y)), cex = 1.3, pch = 16, xlab = "Weight in Kg", ylab = "Height in cm")
plot(y, x, col = "blue", main = "Height and Weight Regression",
abline(lm(x~y)), cex = 1.3, pch = 16, xlab = "Weight in Kg", ylab = "Height in cm")
print(plot(y, x, col = "blue", main = "Height and Weight Regression",
abline(lm(x~y)), cex = 1.3, pch = 16, xlab = "Weight in Kg", ylab = "Height in cm"))
png(file = "linearregression.png")
png(file = "linearregression1.png")
print(plot(y, x, col = "blue", main = "Height and Weight Regression",
abline(lm(x~y)), cex = 1.3, pch = 16, xlab = "Weight in Kg", ylab = "Height in cm"))
v <- c(2, 5.5, 6)
t <- c(8, 3, 4)
print(v%%2)
print(v%%t)
print(v%/%t)
print(v^t)
v <- c(2, 5.5, 6, 9)
t <- c(8, 2.5, 14, 9)
print(v>t)
print(v<t)
print(v==t)
print(v!=t)
v <- c(3, 1, TRUE, 2+3i)
t <- c(4, 1, FALSE, 2+3i)
print(v&t)
print(v | t)
v <- c(3, 0, TRUE, 2+2i)
print(!v)
v1 <- 8
v2 <- 12
t <- 1:10
print(v1 %in% t)
print(v2 %in% t)
M = matrix(c(2, 6, 5, 1, 10, 4), nrow = 2, ncol = 3, byrow = TRUE)
t = M%*%t(M)
print(t)
v <- 'hello'
print(v)
#Atomic vector of type character
v <- 'hello'
print(v)
#Atomic vector of type double
print(12.5)
#Atomic vector of type integer
print(63L)
#Atomic vector of type logical
print(TRUE)
#Atomic vector of type complex
print(2+3i)
#Atomic vector of type raw
print(charToRaw('hello'))
#Multiple elemnts vector
#Creating a sequence from 5 to 13
v <- 5:13
print(v)
v <- 6.6:12.6
print(v)
v <- 3.8:11.4
print(v)
#using the seq operator
v <- seq(5, 9, by = 0.4)
print(v)
v <- c('sun', 'mon', 'tue', 'wed', 'thur', 'fri', 'sat')
s <- c('apple', 'red', 5, TRUE)
print(v)
print(s)
#using position
t <- c('sun', 'mon', 'tue', 'wed', 'thur', 'fri', 'sat')
u <- t[c(2, 3, 6)]
print(u)
#using logical indexing
u <- t[c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, FALSE)]
print(u)
#Accessing using negative indexing
u <- t[c(-5, -3)]
print(u)
#Accessing elements using 0/1 indexing
y <- t[c(0, 0, 0, 0, 0, 0, 1)]
print(y)
v1 <- c(3, 8, 4, 5, 0, 11)
v2 <- c(4, 11, 0, 8, 1, 2)
#Vector Addition
add.result <- v1 +v2
print(add.result)
#vector subtraction
sub.result <- v1-v2
print(sub.result)
#Vector multiplication
mul.result <- v1 * v2
print(result)
#vector division
div.result <- v1/v2
print(div.result)
v1 <- c(3, 8, 4, 5, 0, 11)
v2 <- c(4, 11)
#to compensate for its length v2 becomes c(4, 11, 4, 11, 4, 11)
add.result <- v1 + v2
print(add.result)
#Vector element sorting
v <- c(3, 8, 4, 5, 0, 11, -9, 304)
sort.result <- sort(v)
print(sort.result)
#sorting them in reverse order
revsort.result <- sort(v, decreasing = TRUE)
print(revsort.result)
#Also
print(rev(sort(v)))
#Sorting the character vectors
v <- c('Red', 'Blue', 'Yellow', 'Violet')
sort.result <- sort(v)
print(sort.result)
#sorting character vectors in reverse order
print(rev(sort(v)))
mydata
install.packages('mydata')
library('mudata')
library('mydata')
fit <- lm(y~x1 + x2 + x3. data = mydata)
fit <- lm(y~x1 + x2 + x3, data = mydata)
install.packages('tidyverse')
devtools::install_github("kassmbara/datarium")
install.rtools
install.Rtools
data("marketing", package = "datarium")
head(marketing, 4)
devtools::install_github("kassmbara/datarium")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
## "C:\\rtools40\\usr\\bin\\make.exe"
install.packages("jsonlite", type = "source")
devtools::install_github("kassmbara/datarium")
devtools::install_github(repo = "kassmbara/datarium")
devtools::install_github(repo = "kassambara/datarium")
data("marketing", package = "datarium")
head(marketing, 4)
model <- lm(sales ~ youtube + facebokk + newspaper, data = marketing)
print(model)
print(summary(model))
model <- lm(sales ~ youtube + facebokk + newspaper, data = marketing)
model <- lm(sales ~ youtube + facebook + newspaper, data = marketing)
print(model)
print(summary(model))
summary(model)$coefficients
model <- lm(sales~youtube + facebook, data = marketing)
summary(model)
confint(model)
error_rate <- sigma(model)/ mean(marketing$sales)
print(error_rate)
head(marketing,4)
test_value <- data.frame(youtube = 1000, facebook = 96)
result <- predict(model,test_value)
print(result)
require(ggplot2)
library(ggplot2)
ggplot(radial, aes(sales, youtube, facebook))+geom_point()+geom_smooth(method = "lm")
ggplot(marketing, aes(sales, youtube, facebook))+geom_point()+geom_smooth(method = "lm")
ggplot(marketing, aes(y = sales,x1=  youtube,x2 =  facebook))+geom_point()+geom_smooth(method = "lm")
ggplot(marketing, aes(y = sales,x=  youtube))+geom_point()+geom_smooth(method = "lm")
library(rsm)
model.lm <- lm(sales~poly(youtube, facebook, degree = 2), data = marketing)
persp(model.lm, youtube~facebook, zlab = "sales")
print(plot(y, x, col = "blue", main = "Height and Weight Regression",
abline(lm(x~y)), cex = 1.3, pch = 16, xlab = "Weight in Kg", ylab = "Height in cm"))
print(plot(y, x, col = "blue", main = "Height and Weight Regression",
abline(lm(x~y)), cex = 1.3, pch = 16, xlab = "Weight in Kg", ylab = "Height in cm"))
x <- c(151, 174, 138, 186, 128, 136, 179, 163, 152, 131)
y <- c(63, 81, 56, 91, 47, 57, 76, 72, 62, 48)
relation <- lm(y~x)
print(relation)
print(summary(relation))
predict(object, newdata)
a <- data.frame(x = 170)
result <- predict(relation, a)
print(result)
print(plot(y, x, col = "blue", main = "Height and Weight Regression",
abline(lm(x~y)), cex = 1.3, pch = 16, xlab = "Weight in Kg", ylab = "Height in cm"))
library(rsm)
model.lm <- lm(sales~poly(youtube, facebook, degree = 2), data = marketing)
persp(model.lm, youtube~facebook, zlab = "sales")
print(plot(sales, youtube, facebook, main= "Multiple Linear Regression"))
#Installing the datarium package#impact of the amount of money spent on three advertising
#medias(youtube, facebook and newspaper) on sales
#installing the data package
devtools::install_github(repo = "kassambara/datarium")
#Loading and inspecting the marketing data
data("marketing", package = "datarium")
head(marketing, 4)
#Now, Building a model
#We want to build a model for estimating sales based on the advertising budget
# sales = b0 + b1 * youtube + b2 * facebook + b3 * newspaper
model <- lm(sales ~ youtube + facebook + newspaper, data = marketing)
print(model)
print(summary(model))
##Interpretaion
summary(model)$coefficients
#The newspaper varibale suggests that there is no significant relationship between sales and marketing budget
#so newspaper varibale can be rejected from the model as it is insignificant.
#Thus,
model <- lm(sales~youtube + facebook, data = marketing)
summary(model)
#Thus, model equation becomes, sales = 3.5 + 0.045 * facebook + 0.187 * facebook
#The confidence interval of model can be extracted as follow
confint(model)
#Model Accuracy Assessment
#The overall quality of the model can be assessed by examining the R squared (R2) and Residual Standard error(RSE)
#R squared
The R squared is 0.89 as given in the summary of the model
Thus, 89% of the variance in the measure of sales can be predicted by youtube and
facebook advertising budgets
#Residual Standard Error(RSE) or Sigma
#The lower RSE is, the accurate the model is
#The error rate can be calculated
error_rate <- sigma(model)/ mean(marketing$sales)
print(error_rate)
#That is 11% error rate with RSE value of 2.018, which means the model is faorly accurate
#Now predicting a value
head(marketing,4)
#test value
test_value <- data.frame(youtube = 1000, facebook = 96)
result <- predict(model,test_value)
print(result)
require(ggplot2)
library(ggplot2)
ggplot(marketing, aes(y = sales,x=  youtube))+geom_point()+geom_smooth(method = "lm")
#optionally
library(rsm)
model.lm <- lm(sales~poly(youtube, facebook, degree = 2), data = marketing)
persp(model.lm, youtube~facebook, zlab = "sales")
print(plot(sales, youtube, facebook, main= "Multiple Linear Regression"))
print(plot(sales, youtube, facebook, main= "Multiple Linear Regression"))
print(plot( youtube, facebook, main= "Multiple Linear Regression"))
plot(model, youtube, facebook)
plot(model)
Year <- c(2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2017,2016,2016,2016,2016,2016,2016,2016,2016,2016,2016,2016,2016)
Month <- c(12, 11,10,9,8,7,6,5,4,3,2,1,12,11,10,9,8,7,6,5,4,3,2,1)
Interest_Rate <- c(2.75,2.5,2.5,2.5,2.5,2.5,2.5,2.25,2.25,2.25,2,2,2,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75,1.75)
Unemployment_Rate <- c(5.3,5.3,5.3,5.3,5.4,5.6,5.5,5.5,5.5,5.6,5.7,5.9,6,5.9,5.8,6.1,6.2,6.1,6.1,6.1,5.9,6.2,6.2,6.1)
Stock_Index_Price <- c(1464,1394,1357,1293,1256,1254,1234,1195,1159,1167,1130,1075,1047,965,943,958,971,949,884,866,876,822,704,719)
plot(x = Interest_Rate, y = Stock_Index_Price)
plot(x = Unemployment_Rate, y = Stock_Index_Price)
model <- lm(Stock_Index_Price~Interest_Rate+Unemployment_Rate)
summary(model)
#optionally
library(rsm)
model.lm <- lm(sales~poly(youtube, facebook, degree = 2), data = marketing)
persp(model.lm, youtube~facebook, zlab = "sales")
list_data <- list("Red", "Green", c(21, 32, 11), TRUE, 51.23, 119.1)
print(list_data)
#Naming of the elements in a list
list_data <- list(c("Jan", "Feb", "Mar"), matrix(c(3, 9, 5, 1, -2, 8), nrow = 2), list("green"), 12.3)
names(list_data) <- c("1st Quarter", "A_Matrix", "A inner list")
print(list_data)
print(list_data[1])
##Accessing the list using name
print(list_data$A_Matrix)
list_data[4] <- "new element"
name(list_data[4]) <- "lol"
print(list_data)
#adding the elements
list_data[4] <- "new element"
names(list_data[4]) <- "lol"
print(list_data)
names[list_data[4]] <- "lol"
list_data[4] <- NULL
print(list_data)
list_data[3] <- "updated element"
list_data[3] <- "updated element"
print(list_data)
list1 <- c(1, 2, 3, 4)
list2 <- c('red', 'green','blue')
merged.list <- c(list1, list2)
print(merged.list)
list1 <- c(1, 2, 3, 4)
list2 <- c('red', 'green','blue')
merged.list <- merge(list1, list2)
print(merged.list)
list1 <- c(1, 2, 3, 4)
list2 <- c('red', 'green','blue')
merged.list <- c(list1, list2)
print(merged.list)
#converting the list into vector
list1 <- list(1:5)
print(list1)
list2 <- list(10:14)
print(list2)
#unlisting
v1 <- unlist(list1)
v2 <- unlist(list2)
print(v1)
print(v2)
rainfall <- c(799, 1174.8, 865.1, 1334.6, 635.4, 918.5, 685.5, 998.6, 784.2, 985.8, 1071)
#convert it to a time series object
rainfall.timeseries <- ts(rainfall, start = c(2012, 1), frequency = 12)
print(rainfall.timeseries)
png(file = "rainfallTimeseries.png")
plot(rainfall.timeseries)
dev.off()
plot(rainfall.timeseries)
rainfall1 <- c(799,1174.8,865.1,1334.6,635.4,918.5,685.5,998.6,784.2,985,882.8,1071)
rainfall2 <- c(655,1306.9,1323.4,1172.2,562.2,824,822.4,1265.5,799.6,1105.6,1106.7,1337.8)
combined.raifall <- matrix(c(rainfall1, rainfall2), nrow = 12)
print(combined.raifall)
rainfall.timeseries <- ts(combined.raifall, start = c(2012, 1), frequency = 12)
png(file = "multiplets.png")
plot(rainfall.timeseries, main = "Multiple TimeSeries")
dev.off()
plot(rainfall.timeseries, main = "Multiple TimeSeries")
